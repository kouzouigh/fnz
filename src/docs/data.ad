== Data

This chapter will go through some monadic types implementations.

=== Maybe

The +Maybe+ is normally used to avoid asking whether the value is null or it
can contain any value. That's why the +Maybe+ object has two children: 
+Maybe.Just+ and +Maybe.Nothing+. 

NOTE: In the JDK 8 you can find the +Optional+ type. Sometimes is also called
+Option+.

As we'll be seeing along this chapter is that monads like +Maybe+, +Either+ or
+ListMonad+ will allow to apply functions over the wrapped value, only if the
wrapped value is considered *valid*. Otherwise the wrapped value will be 
returned.

To see how to use +Maybe+ lets use it in a simple exercise:

""
Given a number, I want to divide it by half two times, and then if still
not decimal, multiplied by three.
""

Because all even numbers will become decimals as soon as I try to dividing them
by half I want to stop the process as soon as the process detects that number
is no longer eligible to success.

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybebind,indent=0]
----

<1> tries to divide, if not even returns nothing otherwise returns division result.
<2> tries again to divide the number under the same premises.
<3> If division ended successfully only then applies multiplication.

The nice thing about this plan is that if any of the previous steps ended with
a +Maybe.Nothing+ instance the process won't go any further.

In order to understand what happens underneath, why process doesn't continue, 
I would like to show you both implementation of +Maybe.Just+ and +Maybe.Nothing+.

While +Maybe.Just+ applies the function:

[source,java]
----
include::{sourceDirJava}/fnz/data/Maybe.java[tags=justbind,indent=0]
----

+Maybe.Nothing+ like its name, *does nothing* but to return the current value :P

[source,java]
----
include::{sourceDirJava}/fnz/data/Maybe.java[tags=nothingbind,indent=0]
----

Sometimes it would be useful to have an alternative when there's no value. That's
what the method +or+ does. It makes the monad to return the alternative value in
case there was no value. Otherwise the current value is returned.

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybeor1,indent=0]
----

It's pretty clear in the previous example, but it is even clearer when you do
something ( a transformation for example) with the current inner value.

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybeor2,indent=0]
----

==== Or expressions

Of course you can always use the `|` operator when thinking about `or` expressions:

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=usingOrAsValue,indent=0]
----

<1> The operation ends with and empty string. Using Maybe('') returns
Nothing()
<2> In case partial returns Nothing() we would like to use
Just('anybody') instead

Using `|` makes expressions much more readable... and fun :)

Last example used an `OR` expression. That expression was a simple
value. Sometimes we would like to use `lazy` expressions we only want
to be evaluated `just in case`.  When executed those `lazy
expressions` will be returning a valid value.

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=usingOrAsLazyExpression,indent=0]
----

<1> The operation ends with and empty string. Using Maybe('') returns
Nothing()
<2> In case partial returns Nothing() we would like to use
Just('anybody') instead. In this case the value is not computed until
we made sure the previous computation returned Nothing()


==== The maybe `truth`

Sometimes you just don't know whether the value is going to be valid
or not. Then it could come handy to use the `maybe` method.

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybetruth,indent=0]
----

So expressions could become easier to understand when using `maybe`:

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybetruthexample1,indent=0]
----

<1> We are using a possible `not valid` value
<2> We build an expression that in case the left hand value is not valid we
will be using the right hand side value instead
<3> Because the value of the left was not valid then we used the right hand one, hence
there is a present value
<4> The value used was 'me'

If there had been a valid value at the right hand side, then that
value would have been used instead:

[source,groovy]
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=maybetruthexample2,indent=0]
----

=== Fn 

*fnz.data.Fn* is a class that can be used as a shorcut for all data structures
explained in this chapter. Depending on the style of your code you could be 
either chaining actions over a monad using method-chaining or using the
Haskell-like public methods in an in-out style.

Lets compare the Maybe monad using the Haskell-like style with *Fn*

[source,groovy]
.fapply (method-chain) imports
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=imports,indent=0]
----

[source,groovy]
.fapply (method-chain)
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=fapplyspec,indent=0]
----

[source,groovy]
.fapply (Fn) imports
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=fnimports,indent=0]
----

[source,groovy]
.fapply (Fn)
----
include::{testDir}/fnz/data/MaybeSpec.groovy[tags=fapplyspechaskell,indent=0]
----

=== Either

Either monad is also one of the classics. The +Either+ monad instance can 
represent correct or error.

As imperative programmer I'm used to choose between branches in my code using
conditional structures such as +if+. As Groovy programmer I've gone one step
further and I've met the +Groovy Truth+ that helps me a lot classifying
instances between those which could be seen as a false statement and those 
which can be taken as a true statement.

But what if we go beyond ? What if we had a type saying it could be right or
wrong depending on its own but still having content ?.

The following example tries to search certain type of people from a given list.
The search will stop once a person has been found with any of the given rules.

[source,java]
----
include::{testDir}/fnz/data/EitherSpec.groovy[tags=eithermonadsearch,indent=0]
----

First of all, I need to apologise because in this example It seems I've used Either just
to do the opposite. This time think +Either.Left+ as something telling us to 
stop looking because we've found what we were looking for.

<1> +baseSearch+ is a function that returns another function. 
That inner function returns an +Either.Left+ instance with the result inside 
if the +search+ function passed as parameter succeeded. I want the function to
return +Either.Left+ because I know when an +Either.Left+ is returned no further
action is done. And because I've found what I was looking for, I don't want the
search to go any further.
<2> I've created three different functions valid to be used in an +fmap+ function. That
means they receive an unwrapped value but they will return a wrapped value.
<3> Given the source we will try to apply three types of search in order to find
someone. Because the rules of the monad, I know if the first search fails the
second will be triggered, and so on. In case any of them succeed the value will be
return immediately.

==== Or

The same way we used `or` in Maybe to express an alternative to
`wrong` values we can use it in `Either`.

[source,java]
.value
----
include::{testDir}/fnz/data/EitherSpec.groovy[tags=eitherorvalue,indent=0]
----

[source,java]
.lazy expression
----
include::{testDir}/fnz/data/EitherSpec.groovy[tags=eitherorcomputation,indent=0]
----

=== ListMonad

Collections in general are one of the most used data structures ever. 
Some languages use collections only as data structures and some others make 
them implement monadic semantics in order to be able to do things like
+list comprehensions+.

According to **Wikipedia** a +list comprehension+ is:

[,Wikipedia]
""
A list comprehension is a syntactic construct available in some programming 
languages for creating a list based on existing lists
""

I would add that implementations differ in which are capable of handling
streams and those which don't. 

First of all I'm would like to start with a basic finite example. Like we
did before, lets sneak a little bit on how *Haskell* does it ;)

(TODO)

=== Try


Nowadays JVM languages deal with exceptions using *try-catch* blocks. The
problem is that these constructions force programmers to build their code in
a certain way.

*Try* monad wraps the result of a given computation. That computation could 
either end on a desired value, having an instance of *Success*, 
or could throw an exception, having an instance of *Failure* instead.

==== Try()

Instead of using a typical try/catch expression we could handle an expression
as a safe execution but with a possible failure value.

We can execute directly an unsafe function using:

[source,groovy]
.Using Try directly with a initial value
----
Try(A a, Function<A,B>)
----

Of course a *Function* could be changed by a closure. Lets see the
following example.

[source,groovy]
.Using Try directly with a initial value
----
include::{testDir}/fnz/data/TrySpec.groovy[tags=tryFunction1,indent=0]
----

In this example we should be expecting whether a *Try.Success* value
containing the expected result or a *Try.Failure* with the exception
thrown (if any) and the initial value used to trigger the execution.

There could be some cases where you don't care about passing an
initial value to the *Try* execution.

[source,groovy]
.Using Try directly without a initial value
----
Try(Function<A,B>)
----

[source,groovy]
.Using Try directly without a initial value
----
include::{testDir}/fnz/data/TrySpec.groovy[tags=tryFunction2,indent=0]
----

<1> We can receive a Success or a Failure but we cannot expect to get
the initial value because it never was provided in the first place.

==== wrap

In order to get a *Try* result we could also *wrap* the computation we
think could fail within a function which returns a *Try* instance with
the result of the computation (Try.Success or Try.Failure).

Like *Either*, composition has a special importance here, due to
the fact that when having a *Failure* instance all possible actions
applied over it will always return the same failure.

This first example tries to parse an invalid number and add one to it. 

[source,groovy]
.Parse a possible number
----
include::{testDir}/fnz/data/TrySpec.groovy[tags=basic1,indent=0]
----

Here we can see both behaviors. 

<1> First of all the given function fails and
the instance returned is an instance of *Failure* we know that because only
*Failure* instances return *true* when calling to *isFailure()* method.
<2> Besides that we can also notice that using a failure instance to create 
further function composition will end returning the same failure, which is the
same as saying that no further function will ever succeed using that failure.

When having a *Failure* instance, the exception that caused it is also wrapped
within the instance, and you could whether get it to inspect it, or throw it
like any other exception.

[source,groovy]
.throwException
----
include::{testDir}/fnz/data/TrySpec.groovy[tags=exception1,indent=0]
----

<1> You can get the wrapped exception
<2> Or throw the exception instead

==== Recover

Normally when having an exception we would like to have some
alternative. Sometimes we may want to set, for example a default value
in case something went wrong.

In our example I would like to get zero in case the number was not
valid.  Then I would like to add one to that given number.

What if we want a fallback behavior when something went wrong ?

Well there is the *recover()* method. This method has two arguments the
possible *Failure* instance, and the *Success* instance to use instead.

[source,groovy]
.recover()
----
include::{testDir}/fnz/data/TrySpec.groovy[tags=recover,indent=0]
----


