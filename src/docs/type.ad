== Types

This chapter has to do with other ways of creating/using/extending types with Groovy.

=== ftype

[quote, Java(TM) spec]
""
A functional interface is an interface that has just one abstract method (aside from the methods of Object), and thus represents a single function contract
""

*ftype* allows you to declare and create a http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8[*functional interface*]
in one line without the verbosity of having to write a full Java interface.

Normally if you wanted to create a *functional interface* and use it you should be doing something
like this:

[source, groovy]
----
class A {

    interface Fx {
        Integer apply(String word)
    }

    Integer applyFunction(String word, Fx function) {
        return function.apply(word)
    }
    
}
----

With *ftype* you can create in one line the same interface:

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=simpleTypeAlias,indent=0]
----

In general the use cases are:

==== Simple types

[source, groovy]
----
class OuterClass {
    static {
        InterfaceType >= ParameterType >> ReturnType
    }
}
----

Of course you can declare as many interfaces as you want:

[source, groovy]
----
class A {
    static {
        ftype Fa >= String >> Integer
        ftype Fb >= String >> String
        ftype Fb >= String >> Date
    }
}
----

==== Using generics

You can also use generics:

[source, groovy]
----
class OuterClass {
    static {
        InterfaceType(A,B) >= A >> B
    }
}
----

[source, groovy]
----
class OuterClass {
    static {   
        InterfaceType(A,B) >= ParameterType(A) >> ReturnType(B)
    }
}
----

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=genericsBasicReturnType,indent=0]
----
