== Types

This chapter has to do with other ways of creating/using/extending types with Groovy.

=== ftype

[quote, Java(TM) spec]
""
A functional interface is an interface that has just one abstract method (aside from the methods of Object), and thus represents a single function contract
""

*ftype* allows you to declare and create a http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8[*functional interface*]
in one line without the verbosity of having to write a full Java interface.

Normally if you wanted to create a *functional interface* and use it you should be doing something
like this:

[source, groovy]
----
class A {

    interface Fx {
        Integer apply(String word)
    }

    Integer applyFunction(String word, Fx function) {
        return function.apply(word)
    }
    
}
----

With *ftype* you can create in one line the same interface:

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=simpleTypeAlias,indent=0]
----

In general the use cases are:

==== Simple types

[source, groovy]
----
class OuterClass {
    static {
        InterfaceType >= ParameterType >> ReturnType
    }
}
----

Of course you can declare as many interfaces as you want:

[source, groovy]
----
class A {
    static {
        ftype Fa >= String >> Integer
        ftype Fb >= String >> String
        ftype Fb >= String >> Date
    }
}
----

==== Using generics

You can also use generics:

[source, groovy]
----
class OuterClass {
    static {
        InterfaceType(A,B) >= A >> B
    }
}
----

You first should to declare the name of the type and maybe generic
types used in the `Functional Inteface` signature as a parameter or as
return type.

[source,groovy]
----
InterfaceType(A,B)
----

And then you should declare the signature of the function:

[source,groovy]
----
A >> B
----

In this case it means that we will be having a method like this:

[source,groovy]
----
B apply(A a)
----

So as a whole it will be the same as writing:

[source,groovy]
----
interface InterfaceType<A,B> {
    public B apply(A a)
}
----

The parameters and the return type can both use the generic types
declared by the interface type:

[source, groovy]
----
class OuterClass {
    static {   
        InterfaceType(A,B) >= ParameterType(A) >> ReturnType(B)
    }
}
----

The following example declares some generic type used at return type:

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=genericsBasicReturnType,indent=0]
----

Now the example uses generics both as parameter and return type

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=fullGenericsExample,indent=0]
----

And mixing generics with other types:

[source, groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=fullGenericsWithType,indent=0]
----

==== Multiple parameters

So far we've been showing functions with just one parameter or at most
a parameter making use of generics, but wouldn't be great to have a
way of declaring a function with two or more arguments ?

It turns out you can. The syntax to acomplish this is to use the
Groovy syntax for lists.

[source, groovy]
----
ftype SUM(X) >= [X,X] >> X
----

Here we had a funcion `SUM` which takes two parameters of the same
type and returns a value of the same type. It makes sense right ?

In the following example we're using this feature just to show how
parameters can be parametrized (use generics) as well.

[source,groovy]
----
include::{testDir}/fnz/control/TypeSpec.groovy[tags=multipleParameters,indent=0]
----

